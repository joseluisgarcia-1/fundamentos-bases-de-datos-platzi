Bienvenida conceptos básicos y contexto histórico de las Bases de Datos

***Clase 1 Bienvenida conceptos básicos y contexto histórico de las Bases de Datos***

Introducción a las bases de datos relacionales

***Clase 2 Historia de las bases de datos relacionales***

Las bases de datos surgen de la necesidad de conservar la información más allá de lo que existe en la memoria RAM.

Las bases de datos basadas en archivos eran datos guardados en texto plano, fáciles de guardar pero muy difíciles de consultar y por la necesidad de mejorar esto nacen las bases de datos relacionales. 
Su inventor Edgar Codd dejó ciertas reglas para asegurarse de que toda la filosofía de las bases de datos no se perdiera, estandarizando el proceso.

Recomendado de la clase:
https://www.w3resource.com/sql/sql-basic/codd-12-rule-relation.php
https://www.mindmeister.com/es/1079684487/las-12-reglas-de-codd-del-modelo-relacional?fullscreen=1

Las 12 reglas de Codd: fuente

Regla 0: Regla de fundación.
Regla 1: Regla de la información.
Regla 2: Regla del acceso garantizado.
Regla 3: Regla del tratamiento sistemático de valores nulos.
Regla 4: Catálogo dinámico en línea basado en el modelo relacional.
Regla 5: Regla comprensiva del sublenguaje de los datos.
Regla 6: regla de actualización de vistas.
Regla 7: alto nivel de inserción, actualización, y cancelación.
Regla 8: Independencia física de los datos.
Regla 9: Independencia lógicas de los datos.
Regla 10: Independencia de la integridad.
Regla 11: Independencia de la distribución.
Regla 12: La regla de la no subversión.

***Clase 3 Entidades y atributos***

En este ejemplo o curso, cuando un atributo se lo encierra en dos circulos o doble óvalo se está diciendo que es un atributo multivaluado entonces significado
que tiene más de un valor o multiples valores

- Atributos compuestos porque están compuestos valga la aclaración por otros atributos
- Por convención las entidades se colocan en plural, porque una entidad representa un grupo de estos objetos
- Cuando un atributo tiene un guión debajo del nombre o el nombre subrayado, es un atributo que dentro de la entidad se va identificar de forma única
entonces lo identifican de manera única dentro del conjunto o de la entidad
- Entidad fuerte:
    ejemplo:
        Libro
- Entidades débiles:
    - Se representan con un cuadrado pero tienen doble línea, estas entidades pueden ser débiles por dos motivos, uno por identidad y otro por existencia
    las entidades débiles por identidad quiere decir que no se se diferencian entre sí más que por la clave de su entidad fuerte
        ejemplo:
            ejemplares del libro que es la entidad fuerte


***Clase 4 Entidades de Platzi Blog***

Nuestro proyecto será un manejador de Blogpost. Es un contexto familiar y nos representará retos muy interesantes.

- Las entidades recordar que convencionalmente se escriben en plural
    ejemplo de entidad -> post, y sus atributos:
        entidad: posts
        atributos: título, fecha_publicación, contenido, status, etiquetas(atributo multivaluado), id(atributo que dentro de la entidad se va identificar de forma única)  
    ejemplo de entidad -> usuarios, y sus atributos:
        entidad: usuarios
        atributos: login, password, apodo, username, email, id(atributo que dentro de la entidad se va identificar de forma única)

Primer paso: Identificar las entidades
Segundo paso: Pensar en los atributos

***Clase 5 Relaciones***

- Las relaciones es la manera en que empezamos a ligar nuestras diferentes entidades u objetos
    ejemplos:
        las relaciones se representan con un rombo

ejemplo:
----------            ---------
automóvil ----|tiene|--- dueño
----------            ---------
----------                ---------
jugador    ----|pertenece|--- equipo
----------                ---------

Las relaciones nos permiten ligar o unir nuestras diferentes entidades y se representan con rombos. 
Por convención se definen a través de verbos.

Las relaciones tienen una propiedad llamada cardinalidad y tiene que ver con números. 
Cuántos de un lado pertenecen a cuántos del otro lado:

Cardinalidad: 1 a 1
Cardinalidad: 0 a 1
Cardinalidad: 1 a N
Cardinalidad: 0 a N

- ejemplos de cada cardinalidad:
    1 a 1:
        (1)persona tiene (1)datos_contacto
        (1)datos_contacto pertenecen a (1)persona
        por eso decimos que es una relación de 1 a 1 y la podemos representan así: 1:1
        en diagramas físicos los vamos a encontrar así: 
        __|_______________|__
          |               |
y en este también lo representa y se entiende como: 1 y sólo 1 de un lado y 1 y sólo 1 del otro lado     
        _||_______________||_
         ||               ||
          
    0 a 1:

        algunos autores la discuten, sin embargo, se la conoce como 1 a 1 opcional y eso queire decir que no existe alguno de los lados, la podemos representar 0:1
        ejemplo:
            sesion_actual tiene usuario
            la sesion_actual debe tener un usuario, pero el usuario puede que no esté en la sesión en este momento, por lo tanto la cardinalidad se define de 0:1
            y se representa así:
            --|-------|--
            con la línea punteada para indicar que es opcional, o así:
            __|0_______________|__
              |                |
            
    1 a N:
        cabe aclara que índica que en un lado tenemos uno(1) y en otro lado tenemos muchos(N)
            ejemplo:
                persona(1) tiene (N)automóvil
                (1)persona tiene automóvil(N)
                (N)muchos automóviles pertenecen a (1)persona
                
                y se representa así:
            __|_______________0<__
              |                                
              (pate gallina al final)
            __|_______________<__
              |                 
              (pate gallina al final)
            _||_______________|<_
             ||               |
            (pate gallina al final)

    0 a N:

        algunos autores también la discuten, sin embargo, se la conoce como 0 a N opcional y eso quiere decir que no existe alguno de los lados, la podemos representar 0:N
        ejemplo:
            paciente tiene habitacion_hospital
            el hospital tiene 0 pacientes para muchas habitaciones
            y se representa así:
            --|-------<-
            con la línea punteada para indicar que es opcional, o así:
            __|0_______________<__
              |                
***Clase 6 Múltiples muchos***

    N:N
        relación de muchos a muchos
        ejemplo:
            alumno(1) pertenece a (N)clases
            alumno(N) pertenece a (1)clases
        se lo puede representar N:N

***Clase 7 Diagrama ER***

Un diagrama es como un mapa y nos ayuda a entender cuáles son las entidades con las que vamos a trabajar, 
cuáles son sus relaciones y qué papel van a jugar en las aplicaciones de la base de datos.

muchas veces un atributo multivaluado se convierte en una entidad separada, porque si está en muchas partes toma una vida propia

Diagrama Entidad Relación de PlatziBlog:

    usuarios(1) escribe (N)comentarios
    usuarios(1) escribe (N)posts 
    posts(1) tiene (N)comentarios
    posts(N) tiene (1)categorias
    posts(N) tiene (N)etiquetas

***Clase 8 Diagrama Físico:  tipos de datos y constraints***

Texto: 
    Char(n): Este sirve para guardar cadenas de caracteres
    Varchar(n): Este sirve para guardar cadenas de caracteres pero es más dinámico que CHAR la diferencia es la optimización del uso de memoria,
        y si por ejemplo siempre vamos a tener una cadena de 8 caracteres la podemos guardar con un char, pero si la cadena va crecer más se usa varchar
    Text: Sirve para guardar grandes contenidos de texto muy grandes
Números: 
    Integer(n): Para guardar números enteros
    Bigint(n): Es un subtipo de Integer y sirve para guardar números muy muy grandes
    Smallint(n): Es un subtipo de Integer y sirve para guardar números pequeños por ejemplo de 99 o menos
    Decimal(n,s): para guardar números decimales
    Numeric(n,s): 
Fecha/Hora: 
    Date:  Para guardar unicamente la fecha 
    Time: Para guardar unicamente la hora
    Datetime:  Para guardar la fecha, hora y hasta segundos
    Timestamp: Para guardar la fecha, hora y hasta segundos
Lógicos: 
    Boolean: Para guardar True o False, 0 o 1, y se usa para hacer validación entre dos cosas

Constraints(restricciones)
- Not null: Se aegura que la columna no tenga valores nulos, es decir, que ese campo no puede ir vacio o en blanco, y si quieren pasarle un dato así, les da error
- Unique: Se asegura que cada valor en la columna no se repita, es decir, que es uníco en toda la tabla, que solo existe uno con ese valor en la tabla
- Primary Key: Es una combinación de Not Null y Unique, este es una de las más importantes, y cuando colocamos este enla base de datos vamos a tener la garantía
    de que ese campo va ser not null y unique, además nos ayuda a hacer la unión entre una tabla y otra, ó entre una entidad y otra
    es la que en realidad nos ayuda a hacer las relaciones entre entidades
- Foreign Key: Identifica de manera única una tupla en otra tabla, quiere decir llave foránea y es el otro lado de la primary key, y se usa cuando queremos juntar dos tablas
    y decir que esta tabla está relacionada con esta otra lo que hacemos es que la primary key de una tabla se añade como Foreign key en la otra,y debe tener las mismas
    características de la primary key
- Check: Se asegura que el valor en la columna cumpla una condición dada, nos permite generar una regla 
- Default: Coloca un valor por defecto cuando no hay un valor específico, por ejemplo si no viene un valor podemos decir que por defecto traiga un valor 0
- Index: Se crea por columna para permitir búsquedas más rápidas, hay que saber trabajarlos porque genera confusiones

***Clase 9 Diagrama Físico: normalización***



***Clase 10 Formas normales en Bases de Datos relacionales***



***Clase 11 Diagrama Físico: normalizando Platziblog***



RDBMS (MySQL) o cómo hacer lo anterior de manera práctica

***Clase 12 ¿Qué es RDB y RDBMS?***



***Clase 13 Instalación local de un RDBMS (Windows)***



***Clase 14 Instalación local de un RDBMS (Mac)***



***Clase 15 Instalación local de un RDBMS (Ubuntu)***



***Clase 16 Clientes gráficos***



***Clase 17 Servicios administrados***

SQL hasta en la sopa

***Clase 18 Historia de SQL***



***Clase 19 DDL create***



***Clase 20 CREATE VIEW y DDL ALTER***



***Clase 21 DDL drop***



***Clase 22 DML***



***Clase 23 ¿Qué tan standard es SQL?***



***Clase 24 Creando Platziblog: tablas independientes***



***Clase 25 Creando Platziblog: tablas dependientes***



***Clase 26 Creando Platziblog: tablas transitivas***



Consultas a una base de datos

***Clase 27 ¿Por qué las consultas son tan importantes?***



***Clase 28 Estructura básica de un Query***



***Clase 29 SELECT***



***Clase 30 FROM***



***Clase 31 Utilizando la sentencia FROM***



***Clase 32 WHERE***



***Clase 33 Utilizando la sentencia WHERE nulo y no nulo***



***Clase 34 GROUP BY***



***Clase 35 ORDER BY y HAVING***



***Clase 36 El interminable agujero de conejo (Nested queries)***



***Clase 37 ¿Cómo convertir una pregunta en un query SQL?***



***Clase 38 Preguntándole a la base de datos***



***Clase 39 Consultando PlatziBlog***



Introducción a la bases de datos NO relacionales

***Clase 40 ¿Qué son y cuáles son los tipos de bases de datos no relacionales?***



***Clase 41 Servicios administrados y jerarquía de datos***



Manejo de modelos de datos en bases de datos no relacionales
***Clase 42 Top level collection con Firebase***



***Clase 43 Creando y borrando documentos en Firestore***



***Clase 44 Colecciones vs subcolecciones***



***Clase 45 Recreando Platziblog***



***Clase 46 Construyendo Platziblog en Firestore***



***Clase 47 Proyecto final: transformando tu proyecto en una db no relacional***



Bases de datos en la vida real

***Clase 48 Bases de datos en la vida real***



***Clase 49 Big Data***



***Clase 50 Data warehouse***



***Clase 51 Data mining***



***Clase 52 ETL***



***Clase 53 Business intelligence***



***Clase 54 Machine Learning***



***Clase 55 Data Science***



***Clase 56 ¿Por qué aprender bases de datos hoy?***



Bonus

***Clase 57 Bases de datos relacionales vs no relacionales***



***Clase 58 Elegir una base de datos***